import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import indexStyles from '@/styles/index.module.css'
import {useState,useEffect,useMemo} from 'react'
import ResultCard from '../components/resultCard'
import FavoritesCard from '../components/favoritesCard'
import Link from 'next/link'


const inter = Inter({ subsets: ['latin'] })

export default function Home() {

const [searchKeyword, setSearchKeyword] = useState('')
const [dummyData, setDummyData] = useState([])
const [loading,setLoading] = useState(false)
const [sortData, setSortData] = useState({time:null, relevance:null})
const [timeSortType, setTimeSortType] = useState("↑")
const [relevanceSortType, setRelevanceSortType] = useState("↑")
const [sortingActive,setSortingActive] = useState(false)
let [textCount, setTextCount] = useState(false)
let [pageCount, setPageCount] = useState(false)
let [paginationArray, setPaginationArray]=useState([])
let [currentPage, setCurrentPage] = useState(1)
let [displayFavorites, setDisplayFavorites]= useState(false)
let [favoritesPage, setFavoritesPage] = useState([])


const fillPageArray =async(pageNumber) => {
let pageArray = [];

for (let num = 1; num <= pageNumber; num++ ){
  pageArray.push(num)
}

await setPaginationArray(pageArray)

}

const sortedData = useMemo(() => {

  if (dummyData){
  let sorted = [...dummyData];
  


  if (sortData.time === '↑') {
    sorted = sorted.sort((a, b) => a.sortableDate - b.sortableDate);
  } else if (sortData.time === '↓') {
    sorted = sorted.sort((a, b) => b.sortableDate - a.sortableDate);
  }

  if (sortData.relevance === '↑') {
    sorted = sorted.sort((a, b) => {
      if (a.contexts.length === b.contexts.length) {
        return 0;
      } else {
        return b.contexts.length -a.contexts.length;
      }
    });
  } else if (sortData.relevance === '↓') {
    sorted = sorted.sort((a, b) => {
      if (a.contexts.length === b.contexts.length) {
        return 0;
      } else {
        return a.contexts.length- b.contexts.length;
      }
    });
  }

  return sorted;

}
}, [dummyData, sortData]);




const searchHandler = async()=> {

  displayFavorites != false && setDisplayFavorites(false)
  currentPage != 1 && setCurrentPage(1)
  setSortingActive(false)
  setSortData({time:null, relevance:null});
  if (searchKeyword.length > 2 ){
  setLoading(true)
  const res = await fetch(`/api/search?q=${searchKeyword}`);
  const sitedata = await res.json().then(data=> data.results);
  await setDummyData(sitedata)
  await setTextCount(sitedata?.length)
  await setPageCount(Math.ceil(sitedata?.length/10))
  await fillPageArray(Math.ceil(sitedata?.length/10))
  setLoading(false)

  }

}

const sortHandler = (sortObj) => {
  setSortingActive(true);
  setSortData((prevSortData) => {
    const newSortData = { ...prevSortData };
    for (const [key, value] of Object.entries(sortObj)) {
      newSortData[key] = value;
    }
    return newSortData;
  });
};

const favoritesDisplayHandler = async() => {
displayFavorites !=true && setDisplayFavorites(true)
setLoading(true);
const favorRes = await fetch(`/api/allcomments`)
let favoritesdata = await favorRes.json()
favoritesdata = favoritesdata.reverse()
console.log(favoritesdata)
await setFavoritesPage(favoritesdata)
await setDummyData([])
await setSortData({})
await setSortingActive(false)
await setPaginationArray([])

setLoading(false)
}

  return (
    <>
      <Head>
        <title>Speech Finder</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Website helps you finding the forgotten texts 
            
          </p>

          <button className={indexStyles.searchButton} style={{backgroundColor: 'lightgreen'}} onClick = {() => favoritesDisplayHandler()} > See Favorites </button>
        </div>

   
         <form onSubmit={(event) => event.preventDefault()}>
          <input type= 'text' className={indexStyles.searchBox}
          placeholder='Please enter the text you want to search' 
          value={searchKeyword}
          onChange={(el)=> setSearchKeyword(el.target.value)}
          style={{"height":"3em", 'width': '60vw'}}
          required = {true}
          />

          <p> Search Keyword: {searchKeyword} </p>

          {!loading && <p> {textCount} results in {pageCount} pages</p>}
        

          <div style={{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"space-between" }}>
          <input 
          type='submit'
          onClick={searchHandler}
          className={indexStyles.searchButton}
          />

          </div>

          </form> 

         
 
       <>
      <div style={{display:'flex', flexDirection:'row', flexWrap:'wrap'}}>{!loading && paginationArray?.map((num) => (
  <a style={{marginLeft:"0.3em",padding:'2px',backgroundColor:num === currentPage ?'azure' : 'white', border: "1px solid lightgray"}} key={num} onClick={()=> setCurrentPage(num)}> 
    {num === currentPage ? <strong>{num}</strong> : num}
  </a>
))} </div>
  
       {loading && <h3> Loading </h3>}

     



       { 
       
       (displayFavorites) ? <> {favoritesPage?.map((item, index) => <FavoritesCard key ={index} data ={item}/>)}  </>
       
       :( (!loading && dummyData?.length >1) && (displayFavorites==false && favoritesPage.length >0 )) && <div style={{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"space-evenly" }}> 
       <div style={{ margin:'0 0.5em'}}><h4> Sort by </h4> </div>
       <button style={{backgroundColor:'teal'}} className={indexStyles.searchButton} 
       onClick={()=>{setTimeSortType(timeSortType =='↑' ? '↓' : '↑');sortHandler({"time" : timeSortType})  }}> Time {timeSortType}</button> 
       
       
       <button style={{backgroundColor:'teal'}} className={indexStyles.searchButton} onClick={()=>{ setRelevanceSortType(relevanceSortType =='↑' ? '↓' : '↑');sortHandler({"relevance" : relevanceSortType})  }} > Relevance {relevanceSortType} </button> 
       
       <button onClick={() => {setSortData({time:null, relevance:null}); setTimeSortType('↑'); setRelevanceSortType('↑'); setSortingActive(false)  }  }>Reset </button> </div> }

<div className={indexStyles.searchResults}>
      {(!loading && sortingActive ) ? sortedData?.slice((currentPage-1)*10,currentPage*10).map( (data,index) =><div key={index} className={indexStyles.outerCard}> <Link href={`/speeches/${data.slug}`}> <h3 className={inter.className}> {data.pagetitle} </h3> </Link>
     <div className={indexStyles.referenceSection}>
      <h5 className= {inter.className}> Source: {data.source} </h5>
      <h5 className= {inter.className}> Date: {data.rawDateObject} </h5>
      </div>
       {data.contexts.map((item,index) => <ResultCard key={index} item={item} source={data.source} data={data} searchKeyword ={searchKeyword} />)} 
    
      </div>)


      
      : !loading && dummyData?.slice((currentPage-1)*10,currentPage*10).map( (data,index) =><div key={index} className={indexStyles.outerCard}><Link href={`/speeches/${data.slug}`}> <h3 className={inter.className}> {data.pagetitle} </h3> </Link>
     <div className={indexStyles.referenceSection}>
      <h5 className= {inter.className}> Source: {data.source} </h5>
      <h5 className= {inter.className}> Date: {data.rawDateObject} </h5>
      </div>
       {data.contexts.map((item,index) => <ResultCard key={index} item={item} source={data.source} data ={data} searchKeyword ={searchKeyword}  />)} 
    
      </div>)}
      </div> 
</>

        
      </main>
    </>
  )
}
